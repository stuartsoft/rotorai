// Usage:
// ./gradlew app:screen -Ppackage=com.stuartsoft.rotorai -Pscreen=Login

import com.github.mustachejava.DefaultMustacheFactory
import com.google.common.base.CaseFormat

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.9.5'
        classpath 'com.google.guava:guava:23.0'
    }
}

task screen {
    doLast {
        generate {
            // New files
            createFile(scopes, 'templates/screen/Activity.kt.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Activity.kt")
            createFile(scopes, 'templates/screen/Fragment.kt.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Fragment.kt")
            createFile(scopes, 'templates/screen/ViewModel.kt.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}ViewModel.kt")

            createFile(scopes, 'templates/screen/activity.xml.mustache', "src/main/res/layout/activity_${screenFileName}.xml")
            createFile(scopes, 'templates/screen/content.xml.mustache', "src/main/res/layout/content_${screenFileName}.xml")
            createFile(scopes, 'templates/screen/fragment.xml.mustache', "src/main/res/layout/fragment_${screenFileName}.xml")

            createFile(scopes, 'templates/screen/ActivityTests.kt.mustache', "src/androidTest/java/$argPackageDirs/ui/$screenPackage/${argScreen}ActivityEspressoTests.kt")
            createFile(scopes, 'templates/screen/ViewModelTests.kt.mustache', "src/test/java/$argPackageDirs/ui/$screenPackage/${argScreen}ViewModelTests.kt")

            // Existing files
            updateFile(
                    scopes,
                    'templates/screen/ViewModelFactoryModule_ImportPartial.kt.mustache',
                    "src/main/java/$argPackageDirs/ui/ViewModelFactoryModule.kt",
                    "// GENERATOR - MORE IMPORTS //")
            updateFile(
                    scopes,
                    'templates/screen/ViewModelFactoryModule_ViewModel.kt.mustache',
                    "src/main/java/$argPackageDirs/ui/ViewModelFactoryModule.kt",
                    "// GENERATOR - MORE VIEW MODELS //")
            updateFile(
                    scopes,
                    'templates/screen/ApplicationComponent_ImportPartial.kt.mustache',
                    "src/main/java/$argPackageDirs/app/ApplicationComponent.kt",
                    "// GENERATOR - MORE IMPORTS //")
            updateFile(
                    scopes,
                    'templates/screen/ApplicationComponent_ActivityPartial.kt.mustache',
                    "src/main/java/$argPackageDirs/app/ApplicationComponent.kt",
                    "// GENERATOR - MORE ACTIVITIES //")
            updateFile(
                    scopes,
                    'templates/screen/AndroidManifest_ActivityPartial.xml.mustache',
                    "src/main/AndroidManifest.xml",
                    "<!-- GENERATOR - MORE ACTIVITIES -->")
        }
    }
}

def generate(updatesClosure) {
    String argPackage = getProject().getProperty('package')
    String argPackageDirs = argPackage.replaceAll("\\.", File.separator);

    String argScreen = getProject().getProperty('screen')
    String screenPackage = argScreen.toLowerCase()
    String screenName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, argScreen)
    String screenFileName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, argScreen)

    HashMap<String, Object> scopes = new HashMap<String, Object>()
    scopes.put('package', argPackage)
    scopes.put('screenLowerCase', screenPackage)
    scopes.put('screenUpperCamel', argScreen)
    scopes.put('screenLowerCamel', screenName)
    scopes.put('screenUnderscore', screenFileName)

    def replacements = new Expando(
            argPackage: argPackage,
            argPackageDirs: argPackageDirs,
            argScreen: argScreen,
            screenPackage: screenPackage,
            screenName: screenName,
            screenFileName: screenFileName,
            scopes: scopes)
    replacements.updates = updatesClosure
    replacements.updates()
}

def createFile(scopes, String templateFile, String outputFile) {
    String template = file(templateFile).text

    File output = new File(getProjectDir(), outputFile)
    output.getParentFile().mkdirs()

    Writer writer = new FileWriter(output)
    def mf = new DefaultMustacheFactory()
    def mustache = mf.compile(new StringReader(template), 'generator')
    mustache.execute(writer, scopes)
    writer.flush()
}

def updateFile(scopes, String templateFile, String updateFile, String replacement) {
    String template = file(templateFile).text

    Writer writer = new StringWriter()
    def mf = new DefaultMustacheFactory()
    def mustache = mf.compile(new StringReader(template), 'generator')
    mustache.execute(writer, scopes)
    writer.flush()

    File output = new File(getProjectDir(), updateFile)
    String outputContents = output.text

    outputContents = outputContents.replace(replacement, writer.toString())

    Writer fileWriter = new FileWriter(output)
    fileWriter.write(outputContents);
    fileWriter.flush()
}
